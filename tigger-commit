#! /bin/dash

# The tigger-commit command saves a copy of all files
# in the index to the repository.


currBranch="$(cat .tigger/HEAD)"
currBranchFolder=.tigger/branches/$currBranch
index=.tigger/branches/$currBranch/index
repo=.tigger/branches/$currBranch/repo

# input type checking 
# usage: tigger-commit [-a] -m commit-message
if [ "$#" -lt 2 ]
then
    echo "usage: tigger-commit [-a] -m commit-message"
    exit 1

fi

args="$(echo "$@" | grep -E '^(-m .+|-a -m .+|-am .+)$')"
if [ -z "$args" ]
then
    echo "usage: tigger-commit [-a] -m commit-message"
    exit 1
fi



# function - subset0: commit with message
commitSubset0 () {
    commitMsg=$1
    # when every commit happens
    # 1. saves a copy of all files in the index to the repository
    
    # check if what's in index is the same as repo 
    isDiff=0
    for f in $index/*
    do
        temp=$(echo $f | tr '/' '\n' | tail -n 1)
        repoF=$repo/$temp
        if [ -f "$repoF" ]
        then
            # compare 
            checkDiff=$(diff $f $repoF)
            if ! diff $f $repoF >/dev/null 
            then
                isDiff=1
                cp $f $repo
            fi
        else
            isDiff=1
            cp $f $repo
        fi
    done
    
    # exit program when repo is the same with index
    if [ $isDiff -eq 0 ]
    then
        echo "nothing to commit"
        exit 0
    fi


    #   a. if log file empty, commit will be 0
    count=0
    commitFolder="commit$count"
    # 2. store everything in index to a new sub-directory in index with commit indexing
    #   b. retrive last log in log file and add one 
    T=$(sed -e 's/\s//g' "$currBranchFolder/log")
    if [ -n "$T" ]
    # if [ ! -s "$currBranchFolder/log" && -z  ]
    then 
        count=$(tail -1 "$currBranchFolder/log" | cut -d' ' -f 1)
        count=$(($count+1))
        commitFolder="commit$count"
    fi
    mkdir $index/$commitFolder
    cp $index/* $index/$commitFolder 2>/dev/null

    # 3. record this commit with commit index and commit message to log
    # log format: 0 commit message
    echo "$count $commitMsg" >> "$currBranchFolder/log"
    echo "Committed as commit $count"
    exit 0
}

# # function - subset1: add files and commit with message
# #   all files already in the index to have their contents from the 
# #   current directory added to the index before the commit.
commitSubset1 () {
    ###
    echo "Subset 1 commit not implemented"
}

# check arguments
msgOnly=$(echo "$@" | grep -E '^-m .+$')
if [ ! -z "$msgOnly" ]
then 
    commitSubset0 $2
elif [ "$#" -eq 2 ]
then
    commitSubset1 $2
else 
    commitSubset1 $3
    # echo $msgOnly
fi


# create new directory in repo with indexing

# add everything in index to repo (ordered folder)


# find "$index" -type f |
# while read file
# do
#     cp $file $repo
#     exit 0
# done

# # if index is empty 
# echo "nothing to commit"

# if log index in log   


# record commit message and log index to log file 

# "Committed as commit 0"
# "nothing to commit"
    # if the content in index is the same as repo