#! /bin/dash

################################################
################## Doc String ##################
################################################

# Desceiption: The tigger-commit command saves a copy of all files in the index to the repository.

# Each commit will be record to a log file and all the files in that commit will be saved in a sub-directory name with commit index
#   -> index sub-directory name: .commit$numOfCommit
#   e.g. index directory of commit 6 will be .commit6

################################################
################################################
################################################

# Initial checks to make sure .tigger have been intialized
if [ ! -d ".tigger" ]
then
    echo "$0: error: tigger repository directory .tigger not found" 1>&2
    exit 1
fi 

################################################
################# GLOBAL VALUE #################
################################################

currBranch="$(cat .tigger/HEAD)"
currBranchFolder=.tigger/branches/$currBranch
index=.tigger/branches/$currBranch/index
repo=.tigger/branches/$currBranch/repo

################################################
################################################
################################################

# Error Checking 
# 1. Insufficient arguments 
if [ "$#" -lt 2 ]
then
    echo "usage: tigger-commit [-a] -m commit-message" 1>&2
    exit 1

fi

# 2. Check to make sure arguments passed in are valid (no empty commit message, no random letters for options)
args="$(echo "$@" | grep -E '^(-m .+|-a -m .+|-am .+)$')"
if [ -z "$args" ]
then
    echo "usage: tigger-commit [-a] -m commit-message" 1>&2
    exit 1
fi


# Subset0: commit with message
# Saves a copy of all files in the index to the repository
# $1 - Commit message
commitSubset0 () {
    commitMsg=$1

    # 1. Add all updated files in index to repo

    #   isDiff = 1 when there are updated file in index otherwise 0
    isDiff=0
    for f in "$index"/*
    do

        temp=$(echo "$f" | tr '/' '\n' | tail -n 1)
        repoF=$repo/$temp

        #   Update existing file to repo (only when there are updates)
        if [ -f "$repoF" ] && [ ! -d "$f" ]
        then
            #   Compare file in index with the same file in repo 
            if ! diff "$f" "$repoF" >/dev/null 
            then
                #   Set isDiff to 1 as there is/are file(s) to be updated
                isDiff=1
                cp "$f" "$repo" 2>/dev/null
            fi
        
        #   Commit a new file from index to repo 
        elif [ ! -d "$f" ]
        then
            isDiff=1
            cp "$f" "$repo" 2>/dev/null
        fi
    
    done

    # Check for deleted file in index 
    for file in "$repo"/*
    do 
        if [ ! -d "$file" ]
        then
            temp=$(echo "$file" | tr '/' '\n' | tail -n 1)
            if [ ! -f "$index"/"$temp" ]
            then
                rm "$file"
                isDiff=1
            fi
        fi
    done
    
    #   Exit program when repo is the same with index
    if [ $isDiff -eq 0 ]
    then
        echo "nothing to commit"
        exit 0
    fi


    # 2. Take a "snapshot" of this commit and put it into a sub-directory in index
    #   Set initial counter for commit index (if log file is empty then this will be the commit index)
    count=0
    commitFolder=".commit$count"
    #   Retrive the last commit index in log file (if log file is not empty) and increment to get current commit index
    T=$(sed -e 's/\s//g' "$currBranchFolder/log")
    if [ -n "$T" ]
    then 
        count=$(tail -1 "$currBranchFolder/log" | cut -d' ' -f 1)
        count=$((count+1))
        commitFolder=".commit$count"
    fi
    #   Make a new sub-directory for this commit inside index and copy all files in index to this sub-directory
    mkdir "$index"/"$commitFolder"
    cp -f "$index"/* "$index"/"$commitFolder" 2>/dev/null

    # 3. record this commit with commit index and commit message to log
    #   log format: 0 commit message
    printf "$count $commitMsg" >> "$currBranchFolder/log"

    # 4. A message to standard output for users
    echo "Committed as commit $count"
    exit 0
}

# # function - subset1: add files and commit with message
# #   all files already in the index to have their contents from the 
# #   current directory added to the index before the commit.
commitSubset1 () {
    ###
    tigger-commit-subset1 "$1"
}

# Check argument types and redirect to functions accordingly
# Three types: 
#   1. -m "msg"
#   2. -am "msg"
#   3. -a -m "msg"
msgOnly=$(echo "$@" | grep -E '^-m .+$')
if [ -n "$msgOnly" ]
then 
    commitSubset0 "$2"
elif [ "$#" -eq 2 ]
then
    commitSubset1 "$2"
else 
    commitSubset1 "$3"
fi
